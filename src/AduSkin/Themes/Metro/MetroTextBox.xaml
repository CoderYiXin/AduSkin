<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                     xmlns:AduSkin="clr-namespace:AduSkin.Controls.Metro"
                     xmlns:AduAttach="clr-namespace:AduSkin.Controls.Attach"
                    xmlns:Converter="clr-namespace:AduSkin.Controls.Converter">
   <ResourceDictionary.MergedDictionaries>
      <ResourceDictionary Source="/AduSkin;component/Themes/Theme.xaml"/>
      <ResourceDictionary Source="/AduSkin;component/Themes/Opacity.xaml"/>
      <ResourceDictionary Source="/AduSkin;component/Themes/Converters.xaml"/>
   </ResourceDictionary.MergedDictionaries>
 
   <Style x:Key="buttonStyle" TargetType="{x:Type Button}">
      <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
               <Grid>
                  <VisualStateManager.VisualStateGroups>
                     <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="MouseOver">
                           <Storyboard>
                              <DoubleAnimation Storyboard.TargetName="title" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.9" Duration="0:0:0.1"/>
                           </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                           <Storyboard>
                              <DoubleAnimation Storyboard.TargetName="title" Storyboard.TargetProperty="(UIElement.Opacity)" To="0.5" Duration="0:0:0.1"/>
                           </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                     </VisualStateGroup>
                  </VisualStateManager.VisualStateGroups>
                  <TextBlock x:Name="title" Text="{TemplateBinding Content}" Opacity="0.65" VerticalAlignment="Center" Margin="8,0"/>
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type AduSkin:MetroTextBox}">
      <Setter Property="AduAttach:PathBrushAttach.NormalPathColor" Value="{DynamicResource NormalPathBrush}" />
      <Setter Property="AduAttach:PathDataAttach.Width" Value="12" />
      <Setter Property="AduAttach:PathDataAttach.Margin" Value="8,0,2,0"/>
      <Setter Property="AduAttach:PathDataAttach.PathData" Value="{DynamicResource Icon_Search}" />
      <Setter Property="Background" Value="{DynamicResource NormalBackground}"/>
      <Setter Property="MouseMoveBackground" Value="{DynamicResource NormalBackground}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/> 
      <Setter Property="TitleForeground" Value="{DynamicResource NormalForeground}"/>
      <Setter Property="TitleMinWidth" Value="80"/>
      <Setter Property="Foreground" Value="{DynamicResource NormalForeground}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="CornerRadius" Value="2"/>
      <Setter Property="AduAttach:InputAttach.InputHint" Value="请输入..."/>
      <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="SnapsToDevicePixels" Value="True"/>
      <Setter Property="AcceptsReturn" Value="False"/>
      <Setter Property="TextWrapping" Value="NoWrap"/>
      <Setter Property="Padding" Value="4,0"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>   
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type AduSkin:MetroTextBox}">
               <Grid>
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition MinWidth="{TemplateBinding TitleMinWidth}" Width="Auto" x:Name="titleWidth1"/>
                     <ColumnDefinition Width="10" x:Name="titleWidth2"/>
                     <ColumnDefinition/>
                  </Grid.ColumnDefinitions>
                  <AduSkin:MetroTextBlock x:Name="title" Grid.Column="0" 
                     Foreground="{TemplateBinding TitleForeground}" Text="{TemplateBinding Title}" 
                     HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,6"/>
                  <Border x:Name="back" Grid.Column="2" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}">
                     <Grid>
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource NormalBorderBrush}" 
                              CornerRadius="{TemplateBinding CornerRadius}" />
                        <Border x:Name="bordermove" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
                              CornerRadius="{TemplateBinding CornerRadius}" Opacity="0"/>
                        <Border x:Name="bordertrue" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#FF99cb8a" 
                              CornerRadius="{TemplateBinding CornerRadius}" Visibility="Hidden"/>
                        <Border x:Name="borderfalse" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#FFe99595" 
                              CornerRadius="{TemplateBinding CornerRadius}" Visibility="Hidden"/>
                        <Grid x:Name="content">
                           <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" x:Name="iconWidth"/>
                              <ColumnDefinition/>
                              <ColumnDefinition Width="Auto" x:Name="buttonWidth1"/>
                              <ColumnDefinition Width="Auto" x:Name="buttonWidth2"/>
                           </Grid.ColumnDefinitions>
                           <!--<Image Grid.Column="0" Width="16" Height="16" Margin="6,6,0,6" Source="{TemplateBinding Icon}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                           <Path Stretch="Uniform" 
                              Margin="{TemplateBinding AduAttach:PathDataAttach.Margin}" 
                              Width="{TemplateBinding AduAttach:PathDataAttach.Width}"
                              Fill="{TemplateBinding AduAttach:PathBrushAttach.NormalPathColor}" 
                              Data="{TemplateBinding AduAttach:PathDataAttach.PathData}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                           <AduSkin:MetroTextBlock x:Name="inputHint" Grid.Column="1" Opacity="{DynamicResource InputHintOpacity}"
                              Visibility="Collapsed" Margin="{TemplateBinding Padding}" IsHitTestVisible="False"
                              Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding AduAttach:InputAttach.InputHint}"  
                              HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/> 
                           
                           <ScrollViewer Grid.Column="1" x:Name="PART_ContentHost" Focusable="false" 
                              HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                           <Button x:Name="button" Grid.Column="3" Foreground="{TemplateBinding TitleForeground}"
                              Content="{TemplateBinding ButtonTitle}" Focusable="False" 
                              Margin="0,6" Style="{StaticResource buttonStyle}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                              Command="AduSkin:MetroTextBox.ButtonClickCommand"/>
                        </Grid>
                     </Grid>
                  </Border>
                  <Popup x:Name="popupHint" PlacementTarget="{Binding ElementName=PART_ContentHost}"
                         IsOpen="{TemplateBinding IsOpenPopupHint}"
                         AllowsTransparency="True" Focusable="False" Placement="RelativePoint" 
                         VerticalOffset="-42" HorizontalOffset="-4" PopupAnimation="Fade">
                     <Grid Effect="{DynamicResource PopupHintShadowBlack}" Margin="6">
                        <Grid.RowDefinitions>
                           <RowDefinition/>
                           <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="popupborder" CornerRadius="2" Background="{TemplateBinding Background}"/>
                        <AduSkin:MetroTextBlock x:Name="popupText" Margin="8,6"
                           Text="{TemplateBinding PopupHint}"
                           Foreground="{TemplateBinding Foreground }" 
                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Polygon x:Name="popuppolygon" Grid.Row="1" Margin="10,0,0,0"
                           Points="0,0 10,0 5,5 0,0" Fill="{TemplateBinding Background}" /> 
                     </Grid>
                  </Popup>
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="false">
                     <Setter Property="Opacity" Value="{DynamicResource DisableOpacity}"/> 
                  </Trigger>
                  <Trigger Property="IsMouseOver" Value="true">
                     <Setter Property="Opacity" TargetName="border" Value="0"/>
                     <Setter Property="Opacity" TargetName="bordermove" Value="1"/>
                     <Setter Property="BorderBrush" TargetName="bordertrue" Value="{StaticResource SuccessBrush}"/>
                     <Setter Property="BorderBrush" TargetName="borderfalse" Value="{StaticResource ErrorBrush}"/> 
                     <Setter Property="Background" TargetName="back" Value="{Binding MouseMoveBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </Trigger>
                  <Trigger Property="IsPassWordBox" Value="true">
                     <Setter Property="Visibility" TargetName="PART_ContentHost" Value="Hidden"/>
                     <Setter Property="InputMethod.PreferredImeState" Value="Off"/>
                  </Trigger>
                  <Trigger Property="MultipleLine" Value="true">
                     <Setter Property="AcceptsReturn" Value="true"/>
                     <Setter Property="TextWrapping" Value="Wrap"/>
                  </Trigger>
                  <Trigger Property="IsKeyboardFocused" Value="true">
                     <Setter Property="Opacity" TargetName="border" Value="0"/>
                     <Setter Property="Opacity" TargetName="bordermove" Value="1"/>
                     <!--<Setter Property="IsOpen" TargetName="popupHint" Value="true"/>-->
                     <Setter Property="BorderBrush" TargetName="bordertrue" Value="#ff6fae5f"/>
                     <Setter Property="BorderBrush" TargetName="borderfalse" Value="#ffe67979"/>
                     <Setter Property="Visibility" TargetName="inputHint" Value="Collapsed"/>
                     <Setter Property="Background" TargetName="back" Value="{Binding MouseMoveBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </Trigger>
                  <Trigger Property="IsKeyboardFocused" Value="false">
                     <!--<Setter Property="IsOpen" TargetName="popupHint" Value="false"/>-->
                  </Trigger>
                  <Trigger Property="Title" Value="">
                     <Setter Property="MinWidth" TargetName="titleWidth1" Value="0"/>
                     <Setter Property="Width" TargetName="titleWidth2" Value="0"/>
                  </Trigger>
                  <MultiTrigger>
                     <MultiTrigger.Conditions>
                        <Condition Property="Text" Value=""/>
                        <Condition Property="IsEnabled" Value="true"/>
                        <Condition Property="IsKeyboardFocused" Value="false"/>
                     </MultiTrigger.Conditions>
                     <Setter Property="Visibility" TargetName="inputHint" Value="Visible"/>
                  </MultiTrigger>
                  <Trigger Property="Icon" Value="{x:Null}">
                     <Setter Property="Width" TargetName="iconWidth" Value="0"/>
                  </Trigger>
                  <Trigger Property="ButtonTitle" Value="">
                     <Setter Property="Width" TargetName="buttonWidth1" Value="0"/>
                     <Setter Property="Width" TargetName="buttonWidth2" Value="0"/>
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
      <Setter Property="Validation.ErrorTemplate">
         <Setter.Value>
            <ControlTemplate>
               <Border BorderThickness="0">
                  <AdornedElementPlaceholder />
               </Border>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
      <Style.Triggers>
         <Trigger Property="Validation.HasError" Value="True">
            <Setter Property="PopupHint" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            <Setter Property="IsOpenPopupHint" Value="True"/>
         </Trigger>
      </Style.Triggers>
   </Style>

</ResourceDictionary>